@model  Time.Models.TimeSheetTransactionViewModel
@using SBSModel.Models;
@using System.Text;
@using SBSModel.Common;
@using SBSWorkFlowAPI.Models;
@using SBSWorkFlowAPI.ModelsAndService;
@using SBSResourceAPI;
@using SBSWorkFlowAPI.Constants;

@{
   ViewBag.Title = Resource.Time_Sheet_Transaction_Report;
   var userlogin = UserUtil.getUser(Request.RequestContext.HttpContext);
   var duphash = new List<string>();
}

@if (Model.rights != null && Model.rights.Contains(Operation.A))
{
   <script type="text/javascript">
      $(function () {
         InitDatepicker();
         InitDatatable("#TSDataTable", null, null);
      })

      function Export() {

         theForm.action = '@Url.Action("TimeSheetTransactionExport", "TimeSheet")' + '?tabAction=export';
         theForm.method = 'post';
         theForm.target = '_blank';
         theForm.submit();

         theForm.action = '@Url.Action("TimeSheetTransactionReport", "TimeSheet")';
         theForm.method = 'get';
         theForm.target = '';
         CloseProgress();
      };
   </script>

   <div class="pageheader">
      <h2>@Resource.Time_Sheet_Transaction_Report<span></span></h2>
      <div class="breadcrumbs">
         <ol class="breadcrumb">
            <li>@Resource.You_Are_Here</li>
            <li><a href="@Url.Action("Index", "Home")">@Resource.DashBoard</a></li>
            <li class="active">@Resource.Time_Sheet_Transaction_Report</li>
         </ol>
      </div>
   </div>

   <div class="main">
      <div class="row">
         <div class="col-md-12">
            @if (Model.result != null && Model.result.Code != 0)
            {
               if (Model.result.Code < 0)
               {
                  <div class="alert alert-red">
                     @Html.Raw(AppConst.GetMsg(Model.result))
                  </div>
               }
               else if (Model.result.Code > 0)
               {
                  <div class="alert alert-success">
                     @Html.Raw(AppConst.GetMsg(Model.result))
                  </div>
               }
            }

            @using (Html.BeginForm("TimeSheetTransactionReport", "TimeSheet", FormMethod.Get, new { @class = "form-horizontal", role = "form", id = "theForm" }))
            {
               //@Html.AntiForgeryToken()
               <section class="tile color transparent-black filter" id="secfilter">
                  <div class="tile-header transparent">
                     <h1 onclick="CollapseHeader(null, 'btncollapse', 'secfilter')" style="cursor:pointer"><strong>@Resource.Apply_Filter</strong></h1>
                     <div class="controls">
                        <a href="#" class="minimize filter" id="btncollapse"><i class="fa fa-search  color-white"></i></a>
                     </div>
                  </div>
                  <div class="tile-body">
                     <div class="row">
                        <div class="col-md-4">
                           <div class="form-group">
                              <div class="col-sm-12">
                                 <label for="Search_Employee_Profile_ID" class="control-label">@Resource.Request_From</label>
                              </div>
                           </div>
                           <div class="form-group">
                              <div class="col-sm-12">
                                 <select class="chosen-select chosen-transparent form-control" id="Search_Employee_Profile_ID" name="Search_Employee_Profile_ID">
                                    <option value="">-</option>
                                    @if (Model.EmployeeList != null)
                                    {
                                       foreach (var row in Model.EmployeeList)
                                       {
                                          <option value="@row.Employee_Profile_ID" @(Model.Search_Employee_Profile_ID == row.Employee_Profile_ID ? "selected" : "")>@AppConst.GetUserName(row.User_Profile)</option>
                                       }
                                    }
                                 </select>
                                 <div class="validation-error">
                                    @Html.ValidationMessageFor(m => m.Search_Employee_Profile_ID)
                                 </div>
                              </div>
                           </div>
                        </div>
                        <div class="col-md-4">
                           <div class="form-group">
                              <div class="col-sm-12">
                                 <label for="Search_Month" class="control-label">@Resource.Month</label>
                              </div>
                           </div>
                           <div class="form-group">
                              <div class="col-sm-12">
                                 <select class="chosen-select chosen-transparent form-control" id="Search_Month" name="Search_Month">
                                    @if (Model.Monthlst != null)
                                    {
                                       foreach (var row in Model.Monthlst)
                                       {
                                          if (Model.Search_Month == NumUtil.ParseInteger(row.Value))
                                          {
                                             <option value="@(row.Value != null ? row.Value : "")" selected>@row.Text</option>
                                          }
                                          else
                                          {
                                             <option value="@(row.Value != null ? row.Value : "")">@row.Text</option>
                                          }
                                       }
                                    }
                                 </select>
                                 <div class="validation-error">
                                    @Html.ValidationMessageFor(m => m.Search_Month)
                                 </div>
                              </div>
                           </div>
                        </div>
                        <div class="col-md-4">
                           <div class="form-group">
                              <div class="col-sm-12">
                                 <label for="Search_Year" class="control-label">@Resource.Year</label>
                              </div>
                           </div>
                           <div class="form-group">
                              <div class="col-sm-4">
                                 <select class="chosen-select chosen-transparent form-control" id="Search_Year" name="Search_Year">
                                    <option value="0">-</option>
                                    @if (Model.Yearlst != null)
                                    {
                                       foreach (var row in Model.Yearlst)
                                       {
                                          if (Model.Search_Year == row)
                                          {
                                             <option value="@row" selected>@row</option>
                                          }
                                          else
                                          {
                                             <option value="@row">@row</option>
                                          }
                                       }
                                    }
                                 </select>
                                 <div class="validation-error">
                                    @Html.ValidationMessageFor(m => m.Search_Year)
                                 </div>
                              </div>
                           </div>
                        </div>
                     </div>
                     <div class="row">
                        <div class="col-md-6">
                           <div class="form-group">
                              <div class="col-sm-12">
                                 <button type="submit" class="btn btn-default">@Resource.Filter</button>
                                 <button type="button" class="btn btn-default" onclick="Export();">@Resource.Export_To_Excel</button>
                              </div>
                           </div>
                        </div>
                     </div>
                  </div>
               </section>

               <section class="tile color transparent-black">
                  <div class="tile-header transparent">
                     <h1><strong>@Resource.Time_Sheet_Transaction_Report</strong></h1>
                     <div class="controls">
                        <a href="#" class="minimize"><i class="fa fa-chevron-down color-white"></i></a>
                     </div>
                  </div>
                  <div class="tile-body ">
                     <div class="table-responsive">
                        <table class="table table-datatable table-custom" id="TSDataTable">
                           <thead>
                              <tr>
                                 <th class="sort-alpha">@Resource.Employee_Name</th>
                                 <th class="sort-alpha">@Resource.Date</th>
                                 <th class="sort-alpha">@Resource.Indent_No</th>
                                 <th class="sort-alpha">(@Resource._24_Hour_Clock)<br /> @Resource.Clock_In</th>
                                 <th class="sort-alpha">(@Resource._24_Hour_Clock)<br /> @Resource.Clock_Out</th>
                                 <th class="sort-alpha">@Resource.Duration</th>
                                 <th class="sort-alpha">@Resource.Overtime</th>
                                 <th class="sort-amount">@Resource.Hour_Rate</th>
                                 <th class="sort-amount">@Resource.Total_Amount</th>
                              </tr>
                           </thead>
                           <tbody>
                              @if (Model.TimeSheetList != null)
                              {
                                 var i = 0;
                                 foreach (var row in Model.TimeSheetList)
                                 {
                                    var duration = row.Duration.HasValue ? row.Duration.Value : new TimeSpan();
                                    <tr>
                                       <td width="200px">@row.Employee_Name</td>
                                       <td width="75px">@DateUtil.ToDisplayDate(row.Date_Of_Date)</td>
                                       <td>
                                          <span style="font-weight:700">@row.Indent_No</span>
                                          <br />
                                          <span style="color: rgb(144, 144, 144); ">@row.Indent_Name</span>
                                       </td>
                                       <td width="100px">@DateUtil.ToDisplayTime(row.Clock_In)</td>
                                       <td width="100px">@DateUtil.ToDisplayTime(row.Clock_Out)</td>
                                       <td width="100px">@duration.Hours @Resource.Hr_S @(duration.Minutes > 0 ? duration.Minutes + " " + Resource.Min_S : "") </td>
                                       <td width="100px">@GetStatus(DateTime.Parse(DateUtil.ToDisplayTime(row.Clock_Out)), row.Employee_Profile_ID.Value)</td>
                                       <td class="text-right">@NumUtil.FormatCurrency(row.Hour_Rate, 2)</td>
                                       <td class="text-right">
                                          @NumUtil.FormatCurrency(row.Total_Amount, 2)
                                       </td>
                                    </tr>
                                 }
                                 i++;
                              }
                           </tbody>
                        </table>
                     </div>
                  </div>
               </section>
            }
         </div>
      </div>
   </div>

   @functions {

      string GetStatus(DateTime? clockout, int empID)
      {
         /* check time from workdays*/
         if (Model.WorkingDaysList != null && empID != null)
         {
            var wk = Model.WorkingDaysList.Where(w => w.Employee_Profile_ID == empID).FirstOrDefault();
            if (wk != null && wk.workdays != null)
            {
               var dw = (int)clockout.Value.DayOfWeek;
               if (dw == 0)
                  return getDurationWorkdays(wk.workdays.CL_Sun, wk.workdays.ST_Sun_Time, wk.workdays.ET_Sun_Time, clockout);
               else if (dw == 1)
                  return getDurationWorkdays(wk.workdays.CL_Mon, wk.workdays.ST_Mon_Time, wk.workdays.ET_Mon_Time, clockout);
               else if (dw == 2)
                  return getDurationWorkdays(wk.workdays.CL_Tue, wk.workdays.ST_Tue_Time, wk.workdays.ET_Tue_Time, clockout);
               else if (dw == 3)
                  return getDurationWorkdays(wk.workdays.CL_Wed, wk.workdays.ST_Wed_Time, wk.workdays.ET_Wed_Time, clockout);
               else if (dw == 4)
                  return getDurationWorkdays(wk.workdays.CL_Thu, wk.workdays.ST_Thu_Time, wk.workdays.ET_Thu_Time, clockout);
               else if (dw == 5)
                  return getDurationWorkdays(wk.workdays.CL_Fri, wk.workdays.ST_Fri_Time, wk.workdays.ET_Fri_Time, clockout);
               else if (dw == 6)
                  return getDurationWorkdays(wk.workdays.CL_Sat, wk.workdays.ST_Sat_Time, wk.workdays.ET_Sat_Time, clockout);
            }
         }
         return null;
      }

      string getDurationWorkdays(bool? disabled, TimeSpan? start, TimeSpan? end, DateTime? clockout)
      {
         if (!disabled.HasValue || !disabled.Value)
         {
            var clockouttime = DateUtil.ToTime(DateUtil.ToDisplayTime(clockout));
            if (clockouttime > end)
            {
               var duration = DateTime.Parse(DateUtil.ToDisplayTime(clockouttime)).Subtract(DateTime.Parse(DateUtil.ToDisplayTime(end)));
               if (duration != null)
               {
                  var dur = duration.Hours + " " + Resource.Hr_S + " " + (duration.Minutes > 0 ? duration.Minutes + " " + Resource.Min_S : "");
                  return dur.ToString();
               }
            }
         }
         return null;
      }
   }
}