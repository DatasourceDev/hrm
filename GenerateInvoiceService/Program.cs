using System;
using System.Linq;
using System.Configuration;
using System.Threading.Tasks;
using System.Collections.Generic;
using SBSModel;
using SBSModel.Models;
using SBSModel.Common;
using SBSResourceAPI;
using System.IO;
using System.Text;
using Ionic.Zip;
using iTextSharp.text;
using iTextSharp.text.html.simpleparser;
using iTextSharp.text.pdf;
using Renci.SshNet;
using System.IO.Compression;
using System.Net;
using GenerateInvoiceService.ViewModel;

namespace GenerateInvoiceService
{
    class Program
    {
        static UserService uService = new UserService();        
        static CompanyService cService = new CompanyService();
        static void Main(string[] args)
        {
            //UAT purpose
            DateTime now = DateTime.Now;
            var firstDay = new DateTime(now.Year, now.Month, 1);
            var LastDay = firstDay.AddMonths(1).AddDays(-1);

            //Testing
            DateTime RunDate = LastDay; // run date should be the end of the month 
            //LIVE
            //DateTime RunDate = DateTime.Now;

            //Set Trial Period and Capped Amount here
            var Trial_Period = ConfigurationManager.AppSettings["Trial_Period"]; // need to get from billing db            
            var Capped_Amount = ConfigurationManager.AppSettings["Capped_Amount"];
            
            
            var sService = new SubscriptionService();

            //CompanyCriteria cri = new CompanyCriteria();            
            //cri.Company_ID = 5105; //For testing purpose. If Live, we need to loop all the companies.
            //var LstCompany = cService.LstCompany(cri);
            var LstCompany = cService.getPostPaidCompanies();
            var ProductName = sService.getBillingPromotionName(1);            
            if (LstCompany.Count > 0)
            {                                
                foreach(var c in LstCompany)
                {
                    
                    DateTime regDate = c.Effective_Date;
                    if (regDate.AddDays(Convert.ToInt16(Trial_Period)) > RunDate) //If the copmay is still in trial period, we should not generate the invoice
                        continue;
                    // Start generate Invoice for each company    
                    Console.WriteLine("**** Start processing for" + c.Name + ". ****");   
                    var model = new InvoiceViewModels();         
                    var pYear = RunDate.Year;
                    var pMonth = RunDate.Month;
                    var days = DateTime.DaysInMonth(pYear, pMonth);
                    var mList = new List<Invoice_Transactions>();
                    var totalLicenses = 0;
                    decimal totalAmount = 0;
                    
                    //Check whether the invoice is already generated by 
                    var InvCount = sService.GetInvoiceCount(c.Company_ID, pYear, pMonth);
                    if (InvCount > 0)
                        continue;
                    // To get previous month outstanding amount    
                    model.Outstanding_Invoices = sService.Get_Outstanding_Invoice(c.Company_ID, pYear, pMonth, PaymentStatus.Unpaid);
                    model.Invoice_Month = pMonth;
                    model.Invoice_Year = pYear;

                    var dtl = new Invoice_Details();
                    dtl.Module_ID = 1;

                    model.Invoice_Details = new List<Invoice_Details>() { dtl };
                    // To get storage upgrade list to charge
                    List<Storage_Upgrade> LstStorage = new List<Storage_Upgrade>();
                    LstStorage = sService.GetStorageUpgradeList(c.Company_ID, pYear, pMonth);
                     
                    if (model.Outstanding_Invoices.Count > 0)
                    {
                        model.Ttl_Upgrade_Amt = 0;
                        model.Ttl_Outstanding_Amt = 0;
                        foreach (var r in model.Outstanding_Invoices)
                        {
                            var l = sService.GetStorageUpgradeList(c.Company_ID, r.Invoice_Year.Value, r.Invoice_Month.Value);
                            if (l.Count > 0)
                            {
                                foreach (var s in l)
                                {
                                    LstStorage.Add(s);
                                    var dtl1 = new Invoice_Details();
                                    dtl1.AddOn_ID = s.Transaction_ID;
                                    model.Invoice_Details.Add(dtl1);
                                    model.Ttl_Upgrade_Amt += s.Price;
                                }
                                    
                            }
                            model.Ttl_Outstanding_Amt += r.Due_Amount;
                        }
                    }
                    else
                    {
                        model.Ttl_Upgrade_Amt = 0;
                        model.Ttl_Outstanding_Amt = 0;
                        if(LstStorage.Count > 0)
                        {
                            foreach (var s in LstStorage)
                            {
                                var dtl1 = new Invoice_Details();
                                dtl1.AddOn_ID = s.Transaction_ID;
                                model.Invoice_Details.Add(dtl1);
                                model.Ttl_Upgrade_Amt += s.Price;
                            }
                        }                        
                    }
                    model.Storage_Upgrade_List = LstStorage;


                    model.Invoice_No = string.Format("INV{0}{1}{2}", c.Company_ID, pYear, pMonth);
                    model.Generated_On = RunDate;                                                       

                    // Generate transactions
                    model.transList = uService.getUserTransactions(c.Company_ID);
                    for (var i = 1; i <= days; i++)
                    {
                        var m = new Invoice_Transactions();
                        m.TranDate = new DateTime(pYear, pMonth, i);
                        foreach (var t in model.transList)
                        {
                            if (t.Activate_On <= m.TranDate)
                            {
                                m.NoOfUsers += 1;
                                if (t.Deactivate_On != null)
                                {
                                    m.NoOfUsers -= 1;
                                }
                            }
                            m.Amount = Convert.ToDecimal(m.NoOfUsers * 0.05);
                        }
                        mList.Add(m);
                        totalAmount += m.Amount;
                        totalLicenses += m.NoOfUsers;
                    }
                    model.InvTrans = GenerateTransactionToDisplay(mList);
                    // This is current month amount to check whether it is over the capped amount or not
                    model.Due_Amount = totalAmount > Convert.ToDecimal(Capped_Amount) ? Convert.ToDecimal(Capped_Amount) : totalAmount;
                    // This is to update the due amount if there is any outstanding amount or storage upgrading in this month
                    model.Due_Amount += model.Ttl_Outstanding_Amt.Value + model.Ttl_Upgrade_Amt.Value;
                    model.Licenses = totalLicenses;
                    var endDate = RunDate.AddMonths(1).AddDays(-1);
                    model.Due_Date = endDate.AddDays(7);
                    //model.Invoice_To_Address = comp.Billing_Address;
                    model.Product_Name = ProductName;

                    // Insert Into Invoice_Header
                    var header = new Invoice_Header();
                    header.Company_ID = c.Company_ID;
                    header.Invoice_No = model.Invoice_No;
                    header.Due_Amount = model.Due_Amount;
                    header.Invoice_Month = pMonth;
                    header.Invoice_Year = pYear;
                    header.Generated_On = RunDate;
                    header.Invoice_Status = PaymentStatus.Unpaid;
                    if (AppSetting.IsLive == "true")
                        header.Invoice_To = c.Email;
                    else
                        header.Invoice_To = "support@sbsolutions.com.sg";

                    Console.WriteLine("******* Insert Into Invoice tables.");   
                    header.Invoice_Details = model.Invoice_Details;
                    var ret = sService.Insert_Invoice(header);
                    //var ret = true;
                    //Send email to respective customer
                       if (ret == true)
                       {
                           //If customer hasn't paid for previous months, the progrma should set Payment Status as Outstanding.
                           decimal outAmount = 0;
                           int oMonth = 0;
                           if(model.Outstanding_Invoices.Count > 0)
                           {
                               Console.WriteLine("******* Update the previous invoices status.");
                               foreach(var o in model.Outstanding_Invoices)
                               {
                                   o.Invoice_Status = PaymentStatus.Outstanding;
                                   outAmount += o.Due_Amount.Value;
                                   oMonth = o.Invoice_Month.Value;
                               }
                               ret = sService.Update_InvoiceStatus(model.Outstanding_Invoices);
                           }
                           var user = uService.getUserByEmail(c.Email);
                           model.Invoice_To = user.First_Name + user.Last_Name;
                           if (AppSetting.IsLive == "true")
                           {                               
                               model.Invoice_To_Address = c.Email;
                           }
                           else
                           {
                               model.Invoice_To_Address = "support@sbsolutions.com.sg";
                           }
                           
                           //1.Render the page to generate Pdf
                           Console.WriteLine("******* Render the page to generate Pdf.");
                           var htmlToConvert = new List<string>();
                           htmlToConvert.Add(RenderView(model));
                                                    
                           var sr = new StringReader(htmlToConvert[0]);
                           var pdfDoc = new Document(PageSize.A4);
                           var memoryStream = new MemoryStream();
                           var htmlparser = new HTMLWorker(pdfDoc);


                           var writer = PdfWriter.GetInstance(pdfDoc, memoryStream);                           
                           //var pageevent = new PDFPageEvent();
                           var pageevent = new ITextEvents();
                           //pageevent.PrintTime = RunDate;

                           //WebClient wc = new WebClient();
                           //byte[] bytes = wc.DownloadData(AppSetting.SERVER_NAME +  AppSetting.SBSTmpAPI + "/Images/logo-sbsolution.png");                           
                           //pageevent.Logoleft = bytes;
                           writer.PageEvent = pageevent;
                           Console.WriteLine("******* Starts generating Pdf.");
                           pdfDoc.Open();
                           htmlparser.Parse(sr);
                           writer.CloseStream = false;
                           pdfDoc.Close();
                           memoryStream.Position = 0;
                           Console.WriteLine("******* Send Invoice Email.");
                           var eItem = new EmailItem();
                           eItem.Send_To_Email = model.Invoice_To_Address;
                           eItem.Send_To_Name = model.Invoice_To;
                           eItem.ECode = model.Invoice_No;
                           eItem.Company = c;
                           var domainName = "AuthenSBS2-staging";
                           if (AppSetting.IsLive == "true")
                           {
                               domainName = "AuthenSBS2";
                           }
                           string link = AppSetting.SERVER_NAME + domainName + "/Subscription/Payment?pCompanyId=" + EncryptUtil.Encrypt(c.Company_ID) + "&pInvoiceID=" + EncryptUtil.Encrypt(header.Invoice_ID);
                           string link2 = AppSetting.SERVER_NAME + domainName + "/Subscription/BillingReport";
                           eItem.Link = link;
                           eItem.Link2 = link2;
                           decimal curMonth_Amt = model.Due_Amount.Value - (model.Ttl_Outstanding_Amt.Value + model.Ttl_Upgrade_Amt.Value);
                           EmailTemplete.sendInvoiceEmail(eItem, curMonth_Amt, outAmount, oMonth, LstStorage, memoryStream, AppSetting.SERVER_NAME, "support@sbsolutions.com.sg");    // Need to change for live
                       }
                    }
                }

            }

        private static List<Display_Transactions> GenerateTransactionToDisplay(List<Invoice_Transactions> mList)
        {
            var dispInvoiceList = new List<Display_Transactions>();
            if (mList.Count > 0)
            {
                DateTime sDate = DateTime.MinValue, eDate = DateTime.MinValue;
                int sLicense = 0, nLicense = 0;
                int dd = 0;
                int cnt = 0;
                foreach (var t in mList)
                {
                    cnt++;
                    if (t.NoOfUsers > 0)
                    {
                        dd++;
                        if (sDate == DateTime.MinValue)
                        {
                            if (dd > 1)
                                sDate = t.TranDate.AddDays(-1);
                            else
                                sDate = t.TranDate;
                            eDate = t.TranDate;
                            sLicense = t.NoOfUsers; nLicense = t.NoOfUsers;
                        }
                        else
                        {
                            nLicense = t.NoOfUsers;
                            if (sLicense != nLicense || cnt == mList.Count)
                            {
                                var dis = new Display_Transactions();
                                dis.StartDate = sDate;
                                if (cnt == mList.Count)
                                {
                                    dis.EndDate = t.TranDate;
                                    dis.Amount = Convert.ToDecimal((t.NoOfUsers * 0.05) * dd);
                                }
                                else
                                {
                                    dis.EndDate = eDate;
                                    dd = dd - 1;
                                    dis.Amount = Convert.ToDecimal((sLicense * 0.05) * dd);
                                }

                                dis.NoOfDays = dd;
                                dis.NoOfUsers = sLicense;

                                dispInvoiceList.Add(dis);
                                //Intialize again
                                sDate = DateTime.MinValue;
                                dd = 1;
                                sLicense = t.NoOfUsers;
                            }
                            eDate = t.TranDate;
                        }
                    }
                }
            }
            return dispInvoiceList;
        }

        private static string RenderView(InvoiceViewModels model)
        {
            var headertext = Resource.Invoice + " for ";
            headertext += DateUtil.GetFullMonth(model.Invoice_Month) + " " + model.Invoice_Year;

            StringBuilder sb = new StringBuilder();

            sb.Append("<div style='padding: 5px; font-size: 10px'>");// Start main div
            sb.Append("<br />  <br /> ");
            //Header
            sb.Append("<table style='width: 100%;' class='header-form'>");
            sb.Append("<tr style='height:120px'><td width='30%'>&nbsp;</td><td >&nbsp;</td></tr>");
            sb.Append("<tr style='height:120px'><td width='30%'>&nbsp;</td><td >&nbsp;</td></tr>");
            sb.Append("<tr><td colspan='2' style='font-weight:800;'><span style='text-align: center;'>" + headertext + "</span></td></tr>");
            sb.Append("<tr><td colspan='2' style='font-weight:800;'>&nbsp;</td></tr>");
            sb.Append("<tr><td style='font-weight:700;width : 30%;'>" + Resource.Invoice_No + " </td><td style='text-align: left; width: 70%;'>" + model.Invoice_No + "</td></tr>");
            sb.Append("<tr><td style='font-weight:700;'>" + Resource.Invoice_Date + " </td><td style='text-align: left;'>" + DateUtil.ToDisplayDDMMMYYYY(model.Generated_On.Value) + "</td></tr>");
            sb.Append("<tr><td style='font-weight:700;'>" + Resource.Due_Date + " </td><td style='text-align: left;'>" + DateUtil.ToDisplayDDMMMYYYY(model.Due_Date) + "</td></tr>");
            sb.Append("<tr><td style='font-weight:700;'>" + Resource.Attention_To + " </td><td>" + model.Invoice_To + "</td></tr>");
            sb.Append("<tr><td style='font-weight:700;'>" + Resource.Email + " </td><td>" + model.Invoice_To_Address + "</td></tr>");
            sb.Append("<tr><td><br /></td><td></td></tr>");
            sb.Append("</table>");
            //Body
            sb.Append("<div class='tile-body '>"); // Start Tbody div
            sb.Append("<table class='table table-datatable table-custom' id='moduleDataTable'>");
            // thead
            sb.Append("<thead>");
            sb.Append("<tr bgcolor='#ccc' class='text-highlight'>");
            sb.Append("<td width='7%'>&nbsp;&nbsp;" + Resource.No + "</td>");
            sb.Append("<td width='80%' class='sort-alpha'>" + Resource.Description + "</td>");
            sb.Append("<td width='13%' class='sort-numeric'>" + Resource.Amount_USD + "</td>");            
            sb.Append("</tr>");
            sb.Append("</thead>");
            // tobdy
            sb.Append("<tbody>");
            //decimal totalAmt = 0;
            int rowCount = 0;
            if (model.Outstanding_Invoices.Count > 0)
            {
                foreach (var o in model.Outstanding_Invoices)
                {
                    rowCount++;
                    DateTime dt = new DateTime(o.Invoice_Year.Value, o.Invoice_Month.Value, 1);
                    sb.Append("<tr>");
                    sb.Append("<td>&nbsp;&nbsp;" + rowCount + "</td>");
                    sb.Append("<td>" + Resource.Outstanding_Balance + "(" + dt.ToString("MMM") + ")</td>");
                    sb.Append("<td>");
                    sb.Append(o.Due_Amount.Value.ToString("n2"));
                    sb.Append("</td>");
                    sb.Append("</tr>");
                    //totalAmt += o.Due_Amount.Value;
                }
            }
            sb.Append("<tr>");
            sb.Append("<td>&nbsp;&nbsp;" + (rowCount + 1) + "</td>");
            sb.Append("<td>" + model.Product_Name + "</td>");
            sb.Append("<td>");
            decimal curMonth_Amt = model.Due_Amount.Value - (model.Ttl_Outstanding_Amt.Value + model.Ttl_Upgrade_Amt.Value);
            sb.Append(curMonth_Amt.ToString("n2"));
            sb.Append("</td>");
            sb.Append("</tr> ");
            if (model.Storage_Upgrade_List.Count > 0)
            {
                rowCount = model.Outstanding_Invoices.Count + 1;
                foreach (var o in model.Storage_Upgrade_List)
                {
                    rowCount++;                    
                    sb.Append("<tr>");
                    sb.Append("<td>&nbsp;&nbsp;" + rowCount + "</td>");
                    var uStorage = o.Upgrade_Space;
                    var uUnit = "MB";
                    if (o.Upgrade_Space >= 1000)
                    {
                        uStorage = o.Upgrade_Space / 1000;
                        uUnit = "GB";
                    }

                    sb.Append("<td>" + Resource.Upgrade_Storage + "-" + uStorage + uUnit + "(" + DateUtil.ToDisplayDDMMMYYYY(o.Upgrade_On.Value) + ")</td>");
                    sb.Append("<td>");
                    sb.Append(o.Price.ToString("n2"));
                    sb.Append("</td>");
                    sb.Append("</tr>");
                    //totalAmt += o.Price;
                }
            }
            sb.Append("</tbody>");
            // tfoot
            sb.Append("<tfoot>");
            sb.Append("<tr class='table-footer-summary' style='font-size:12px'>");
            sb.Append("<td></td>");
            sb.Append("<td>" + Resource.Total_Amount_USD + "</td>");
            //sb.Append("<td>" + (model.Due_Amount + totalAmt) + "</td>");
            sb.Append("<td>" + model.Due_Amount + "</td>");
            sb.Append("</tr>");
            sb.Append("</tfoot>");
            sb.Append("</table><br />");
            // Details
            DateTime dt1 = new DateTime(model.Invoice_Year.Value, model.Invoice_Month.Value, 1);
            sb.Append("<table style='width: 100%;'>");
            sb.Append("<tr><td colspan='2' style='font-weight:700;'> Transactions for " + dt1.ToString("MMM") + "</td></tr>");
            sb.Append("</table>");

            sb.Append("<div class='tile-body'>");
                    sb.Append("<div class='table-responsive'>");
                        sb.Append("<table class='table table-datatable table-custom' id='moduleDataTable'>");
                        sb.Append("<thead>");
                        sb.Append("<tr bgcolor='#ccc' class='text-highlight'>");
                        sb.Append("<th width='50%' class='sort-numeric'>&nbsp;&nbsp;" + Resource.Date + "</th>");
                        sb.Append("<th width='37%' class='sort-alpha'>" + Resource.Number_Of_Users + "</th>");
                        sb.Append("<th width='13%' class='sort-alpha'>" + Resource.Amount_USD + "</th>");
                        sb.Append("</tr>");
                        sb.Append("</thead>");
                        sb.Append("<tbody>");
                        decimal sumtotal = 0;
                        int licenses = 0;
                        foreach (var row in model.InvTrans)
                        {
                            sb.Append("<tr>");
                            sb.Append("<td>&nbsp;&nbsp;" + DateUtil.ToDisplayDDMMMYYYY(row.StartDate) + "-" + DateUtil.ToDisplayDDMMMYYYY(row.EndDate) + "(" + row.NoOfDays + " Days) </td>");
                            sb.Append("<td>" + row.NoOfUsers + "</td>");
                            sb.Append("<td>" + row.Amount.ToString("n2") + "</td>");
                            sb.Append("</tr>");
                            sumtotal += row.Amount;
                            licenses += row.NoOfUsers;
                        }
                        sb.Append("</tbody>");
                        sb.Append("<tfoot>");
                        sb.Append("<tr class='table-footer-summary' style='font-size:12px'>");
                        sb.Append("<td>&nbsp;&nbsp;" + Resource.Total + "</td>");
                        sb.Append("<td>" + licenses + "</td>");
                        sb.Append("<td>" + sumtotal.ToString("n2") + "</td>");
                        sb.Append("</tr>");
                        sb.Append("</tfoot>");
                        sb.Append("</table>");
                    sb.Append("</div>");
            sb.Append("</div>");            
            sb.Append("</div>");// End Tbody div
            sb.Append("</div>"); // End main div
            sb.Append("</div>"); // End main div

            return sb.ToString();           
        }
    }
}
